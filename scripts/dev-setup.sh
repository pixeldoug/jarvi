#!/bin/bash

# üöÄ Jarvi Development Setup Script
# Este script configura automaticamente o ambiente de desenvolvimento

set -e

echo "üéØ Iniciando setup do ambiente Jarvi..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se Node.js est√° instalado
check_node() {
    if ! command -v node &> /dev/null; then
        error "Node.js n√£o encontrado. Por favor, instale Node.js 18+ primeiro."
        exit 1
    fi
    
    NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -lt 18 ]; then
        error "Node.js 18+ √© necess√°rio. Vers√£o atual: $(node -v)"
        exit 1
    fi
    
    log "‚úÖ Node.js $(node -v) encontrado"
}

# Verificar se npm est√° instalado
check_npm() {
    if ! command -v npm &> /dev/null; then
        error "npm n√£o encontrado. Por favor, instale npm primeiro."
        exit 1
    fi
    
    log "‚úÖ npm $(npm -v) encontrado"
}

# Limpar instala√ß√µes anteriores
clean_previous() {
    log "üßπ Limpando instala√ß√µes anteriores..."
    rm -rf node_modules
    rm -rf packages/*/node_modules
    rm -rf packages/*/dist
    rm -rf packages/*/.expo
    rm -rf packages/*/coverage
    npm cache clean --force
}

# Instalar depend√™ncias
install_dependencies() {
    log "üì¶ Instalando depend√™ncias..."
    npm install
    
    log "üì¶ Instalando depend√™ncias dos workspaces..."
    npm install --workspaces
}

# Configurar ambiente
setup_environment() {
    log "‚öôÔ∏è Configurando vari√°veis de ambiente..."
    
    # Backend
    if [ ! -f packages/backend/.env ]; then
        cp env.example packages/backend/.env
        log "‚úÖ Arquivo .env criado para backend"
    fi
    
    # Web
    if [ ! -f packages/web/.env ]; then
        echo "VITE_API_URL=http://localhost:3001/api" > packages/web/.env
        log "‚úÖ Arquivo .env criado para web"
    fi
    
    # Mobile
    if [ ! -f packages/mobile/.env ]; then
        cp packages/mobile/env.example packages/mobile/.env
        log "‚úÖ Arquivo .env criado para mobile"
    fi
}

# Build do shared package
build_shared() {
    log "üî® Build do pacote shared..."
    cd packages/shared
    npm run build
    cd ../..
}

# Verificar estrutura
check_structure() {
    log "üîç Verificando estrutura do projeto..."
    
    # Verificar se todos os pacotes existem
    for package in backend web mobile shared; do
        if [ ! -d "packages/$package" ]; then
            error "Pacote $package n√£o encontrado"
            exit 1
        fi
    done
    
    log "‚úÖ Estrutura do projeto verificada"
}

# Configurar Git hooks
setup_git_hooks() {
    log "üîß Configurando Git hooks..."
    
    if [ -d ".git" ]; then
        npx husky install
        log "‚úÖ Husky configurado"
    else
        warn "Diret√≥rio .git n√£o encontrado. Pulando configura√ß√£o do Husky."
    fi
}

# Verificar portas
check_ports() {
    log "üîå Verificando portas dispon√≠veis..."
    
    local ports=(3000 3001 8081)
    local available_ports=()
    
    for port in "${ports[@]}"; do
        if ! lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            available_ports+=($port)
        else
            warn "Porta $port est√° em uso"
        fi
    done
    
    if [ ${#available_ports[@]} -eq ${#ports[@]} ]; then
        log "‚úÖ Todas as portas necess√°rias est√£o dispon√≠veis"
    else
        warn "Algumas portas est√£o em uso. Execute 'npm run clean:ports' para liberar."
    fi
}

# Mostrar pr√≥ximos passos
show_next_steps() {
    echo ""
    echo -e "${BLUE}üéâ Setup conclu√≠do com sucesso!${NC}"
    echo ""
    echo -e "${YELLOW}üìã Pr√≥ximos passos:${NC}"
    echo "1. Configure as vari√°veis de ambiente nos arquivos .env"
    echo "2. Execute 'npm run dev:backend' para iniciar o servidor"
    echo "3. Execute 'npm run dev:web' para iniciar a aplica√ß√£o web"
    echo "4. Execute 'npm run dev:mobile' para iniciar o app mobile"
    echo ""
    echo -e "${YELLOW}üöÄ Comandos √∫teis:${NC}"
    echo "‚Ä¢ npm run dev:all          - Iniciar todos os servi√ßos"
    echo "‚Ä¢ npm run test             - Executar testes"
    echo "‚Ä¢ npm run lint             - Verificar c√≥digo"
    echo "‚Ä¢ npm run format           - Formatar c√≥digo"
    echo "‚Ä¢ npm run clean            - Limpar build artifacts"
    echo ""
    echo -e "${YELLOW}üìö Documenta√ß√£o:${NC}"
    echo "‚Ä¢ README.md                - Documenta√ß√£o principal"
    echo "‚Ä¢ ARCHITECTURE.md          - Documenta√ß√£o da arquitetura"
    echo "‚Ä¢ GOOGLE_OAUTH_SETUP.md    - Configura√ß√£o OAuth"
    echo ""
}

# Fun√ß√£o principal
main() {
    echo -e "${BLUE}üöÄ Jarvi Development Setup${NC}"
    echo "================================"
    echo ""
    
    check_node
    check_npm
    check_structure
    clean_previous
    install_dependencies
    setup_environment
    build_shared
    setup_git_hooks
    check_ports
    show_next_steps
}

# Executar fun√ß√£o principal
main "$@" 