#!/bin/bash

# üîç Google OAuth Debug Script
# Este script ajuda a identificar problemas espec√≠ficos do Google OAuth

set -e

echo "üîç Debug do Google OAuth"
echo "======================="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo -e "${BLUE}üîç Verificando configura√ß√£o do Google OAuth...${NC}"
echo ""

# Verificar Google Client ID
log "1. Verificando Google Client ID..."
MOBILE_CLIENT_ID=$(grep "GOOGLE_CLIENT_ID" packages/mobile/.env | cut -d'=' -f2)
BACKEND_CLIENT_ID=$(grep "GOOGLE_CLIENT_ID" packages/backend/.env | cut -d'=' -f2)

echo "   Mobile: $MOBILE_CLIENT_ID"
echo "   Backend: $BACKEND_CLIENT_ID"

if [[ "$MOBILE_CLIENT_ID" == "$BACKEND_CLIENT_ID" ]]; then
    log "   ‚úÖ Client IDs s√£o iguais"
else
    error "   ‚ùå Client IDs s√£o diferentes!"
fi

# Verificar se o Client ID √© v√°lido
if [[ "$MOBILE_CLIENT_ID" == *"apps.googleusercontent.com"* ]]; then
    log "   ‚úÖ Formato do Client ID √© v√°lido"
else
    error "   ‚ùå Formato do Client ID √© inv√°lido"
fi

echo ""

# Verificar configura√ß√£o do Expo
log "2. Verificando configura√ß√£o do Expo..."
if grep -q "googleClientId" packages/mobile/app.config.js; then
    log "   ‚úÖ googleClientId configurado no app.config.js"
else
    error "   ‚ùå googleClientId n√£o encontrado no app.config.js"
fi

if grep -q "bundleIdentifier: 'com.jarvi.app'" packages/mobile/app.config.js; then
    log "   ‚úÖ Bundle identifier configurado corretamente"
else
    error "   ‚ùå Bundle identifier n√£o configurado"
fi

echo ""

# Verificar se os servi√ßos est√£o rodando
log "3. Verificando servi√ßos..."
if curl -s http://localhost:3001/health > /dev/null; then
    log "   ‚úÖ Backend rodando na porta 3001"
else
    error "   ‚ùå Backend n√£o est√° rodando na porta 3001"
fi

if curl -s http://localhost:8081 > /dev/null; then
    log "   ‚úÖ Expo rodando na porta 8081"
else
    error "   ‚ùå Expo n√£o est√° rodando na porta 8081"
fi

echo ""

# Verificar configura√ß√£o do OAuth Consent Screen
log "4. Checklist do OAuth Consent Screen:"
echo "   ‚Ä¢ ‚úÖ App domain configurado com jarvi.life"
echo "   ‚Ä¢ ‚úÖ Authorized domain: jarvi.life"
echo "   ‚Ä¢ ‚úÖ Developer contact configurado"
echo ""

# Verificar configura√ß√£o do iOS Client ID
log "5. Checklist do iOS Client ID:"
echo "   ‚Ä¢ ‚úÖ Bundle ID: com.jarvi.app"
echo "   ‚Ä¢ ‚ö†Ô∏è  Verificar se n√£o h√° redirect URIs configurados (iOS n√£o usa)"
echo ""

echo -e "${YELLOW}üîß Poss√≠veis solu√ß√µes para o erro 400: invalid_request:${NC}"
echo ""
echo "1. ‚è∞ Aguarde mais tempo:"
echo "   ‚Ä¢ As mudan√ßas podem levar at√© 1 hora para propagar"
echo "   ‚Ä¢ Tente novamente em 30 minutos"
echo ""
echo "2. üîÑ Reinicie completamente:"
echo "   ‚Ä¢ Pare todos os servi√ßos"
echo "   ‚Ä¢ Reinicie o backend: npm run dev:backend"
echo "   ‚Ä¢ Reinicie o mobile: npm run dev:mobile"
echo ""
echo "3. üß™ Teste com um Client ID diferente:"
echo "   ‚Ä¢ Crie um novo iOS Client ID no Google Cloud Console"
echo "   ‚Ä¢ Use o novo Client ID no app"
echo ""
echo "4. üì± Verifique o dispositivo:"
echo "   ‚Ä¢ Teste em um dispositivo f√≠sico (n√£o simulador)"
echo "   ‚Ä¢ Verifique se o Google Play Services est√° atualizado"
echo ""
echo "5. üîç Verifique os logs:"
echo "   ‚Ä¢ Abra o console do Expo para ver os logs de debug"
echo "   ‚Ä¢ Procure por mensagens de erro espec√≠ficas"
echo ""

echo -e "${BLUE}üîó Links √∫teis:${NC}"
echo "‚Ä¢ Google Cloud Console: https://console.cloud.google.com/"
echo "‚Ä¢ Expo Auth Session: https://docs.expo.dev/versions/latest/sdk/auth-session/"
echo "‚Ä¢ Google OAuth iOS: https://developers.google.com/identity/sign-in/ios"
echo "" 